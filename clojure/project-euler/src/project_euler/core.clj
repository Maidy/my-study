(ns project-euler.core
  (:use clojure.test))

;; http://projecteuler.net

;; problem 1
;; If we list all the natural numbers below 10
;; that are multiples of 3 or 5, we get 3, 5, 6 and 9.
;; The sum of these multiples is 23.
;; Find the sum of all the multiples of 3 or 5 below 1000.

(defn p1 [n]
  (apply + (filter
           #(or (= (mod % 5) 0) (= (mod % 3) 0))
           (range n))))
;; (p1 1000) => 233168

;; problem 2
;; Each new term in the Fibonacci sequence is generated by adding the previous two terms.
;; By starting with 1 and 2, the first 10 terms will be:
;; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;; By considering the terms in the Fibonacci sequence whose values do not
;; exceed four million, find the sum of the even-valued terms.

(defn p2 []
  (let
      [fib (map first
                (iterate
                 (fn [[x1 x2]] [x2 (+ x1 x2)])
                 [1 2]))]
    (apply + (filter even?
                     (take-while #(> 4000000 %) fib)))))
;; (p2) => 4613732

;; problem 3
;; The prime factors of 13195 are 5, 7, 13 and 29.
;; What is the largest prime factor of the number 600851475143 ?

(defn divide? [a b]
  (= (mod a b) 0))

(defn find-divisor [n d]
  (cond
   (> (* d d) n) n
   (divide? n d) d
   :else (recur n (+ d 1))))

(defn smallest-divisor [n]
  (find-divisor n 2))

(defn prime? [n]
  (= (smallest-divisor n) n))

(defn p3 [n]
  (apply max (filter #(divide? n %) (filter prime? (range 2 n)))))

(defn find-divisor-2 [n d]
  (cond
   (< d 2) n
   (divide? n d) d
   :else (recur n (- d 1))))

(defn largest-divisor [n]
  (find-divisor-2 n (bigint (+ 0.5 (/ n 2)))))

(defn p3-2 [n]
  (largest-divisor n))

;; p3, p3-2는 너무 오래 걸려서 결과 확인 못함.


;; 인자의 약수가 모두 prime 이라고 가정하고,
;; 2부터 시작해서 약수를 찾으면 결과에 추가하고,
;; 약수로 나눠진 값을 찾은 약수 다음값부터 시작해서 다음번 약수를 찾는다.
;; prime 인지 검사하거나 prime을 찾는 함수는 필요 없다.
(defn p3-3 [n]
  (letfn [(iter [a b seq]
            (cond
             (> (* b b) a) (conj seq a)
             (divide? a b) (recur (/ a b) (+ b 1) (conj seq b))
             :else (recur a (+ b 1) seq)))]
    (apply max (iter n 2 []))))

;; (p3-3 600851475143) => 6857


;; problem 4
;; A palindromic number reads the same both ways.
;; The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
;; Find the largest palindrome made from the product of two 3-digit numbers.

;; from 100*100 to 999*999

(defn rotate-number [n]
  (Integer. (apply str (reverse (str n)))))

(defn palindromic-number? [n]
  (= (rotate-number n) n))

(deftest test-rotate-number
  (is (= (rotate-number 1234) 4321)))

(defn n-digit-max [n]
  (- (long (Math/pow 10 n)) 1))

(defn n-digit-min [n]
  (long (Math/pow 10 (- n 1))))

(deftest test-n-digit-max-min
  (is (= (n-digit-max 3) 999))
  (is (= (n-digit-max 1) 9))
  (is (= (n-digit-min 3) 100))
  (is (= (n-digit-min 1) 1)))

(defn p4 [n]
  (let [seq (range (n-digit-max n) (- (n-digit-min n) 1) -1)]
    (apply max
     (filter palindromic-number?
             (for [x seq y seq :when (<= x y)] (* x y))))))

;; (p4 3) => 906609
;; 이렇게 만들면 전체 seq를 모두 검사해야 한다.
;; 처음부터 순서대로 만들어지면 첫번째만 뽑아내면 되는데...


